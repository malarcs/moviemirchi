@using System.Configuration

@{
    ViewBag.Title = "UserAuthentication";
    Layout = "~/Views/Shared/_MovieLayout.cshtml";
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">Please Sign In</h3>
    </div>
    <div class="panel-body">

        @using (Html.BeginForm())
        {
            <div>
                @if (TempData["Failed"] != null)
                {
                    <div class="btn btn-danger">@TempData["Failed"]</div>
                }
            </div>
            <div>
                @if (TempData["Error"] != null)
                {
                    <div class="btn btn-danger">@TempData["Error"]</div>
                }
                <label class="user">User Name </label>
                <input type="text" name="userName" id="userName" class="reviewInput" />
            </div>
            <div>
                <label class="user">Password</label>
                <input type="password" name="password" id="password" class="reviewInput" />
            </div>
            <div>
                <input type="submit" value="Submit" class="btn btn-primary" name="Login" id="auth" />
                @Html.ActionLink("Cancel", "Index", "Home", null, new { @class = "btn btn-warning" })
            </div>

            @Html.Hidden("hfLogin", "")

            <br />
            <div style="margin:10px">
                <a href="#" class="facebook-login-btn"></a><a href="#" class="fr twitter-login-btn"></a>
            </div>
        }
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('form').on('submit', function (e) {
            e.preventDefault();
            var x = this;
            reviewDetail();
            x.submit();

        });
    });

    function reviewDetail() {
        var userName = $("#userName").val();
        var password = $("#password").val();
        var login = { "UserName": userName, "Password": password };
        $("#hfLogin").val(JSON.stringify(login));
    }
</script>

<div id="fb-root"></div>
<script>

    window.userFields = {
        UserId: "@(Session["userid"] != null ? Session["userid"] : "")",
        UserType: "@(Session["type"] != null ? Session["type"] : "")",
        FirstName: "@(Session["firstname"] != null ? Session["firstname"] : "")",
        LastName: "@(Session["lastname"] != null ? Session["lastname"] : "")",
        Email: "@(Session["email"] != null ? Session["email"] : "")",
        Mobile: "@(Session["mobile"] != null ? Session["mobile"] : "")",
        DateOfBirth: "@(Session["dob"] != null ? Session["dob"] : "")",
        Gender: "@(Session["gender"] != null ? Session["gender"] : "")",
        City: "@(Session["city"] != null ? Session["city"] : "")",
        Profile_Pic_Http: "@(Session["profile_pic"] != null ? Session["profile_pic"] : "")",
        Profile_Pic_Https: "@(Session["profile_pic_https"] != null ? Session["profile_pic_https"] : "")",
        Country: "@(Session["country"] != null ? Session["country"] : "")",
        accessToken: "@(Session["fb_access_token"] != null ? Session["fb_access_token"] : "")"
    };


    window.fbAsyncInit = function () {
        FB.init({
            appId: '@ConfigurationManager.AppSettings["FacebookAppId"]',
            status: true, // check login status
            cookie: true, // enable cookies to allow the server to access the session
            xfbml: true  // parse XFBML
        });

        // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
        // for any authentication related change, such as login, logout or session refresh. This means that
        // whenever someone who was previously logged out tries to log in again, the correct case below
        // will be handled.
        FB.Event.subscribe('auth.authResponseChange', function (response) {
            // Here we specify what we do with the response anytime this event occurs.
            if (response.status === 'connected') {
                // The response object is returned with a status field that lets the app know the current
                // login status of the person. In this case, we're handling the situation where they
                // have logged in to the app.
                //testAPI();
                var uid = response.authResponse.userID;
                var accessToken = response.authResponse.accessToken;
                //fbLogin();
                testAPI(response);
            } else if (response.status === 'not_authorized') {
                // In this case, the person is logged into Facebook, but not into the app, so we call
                // FB.login() to prompt them to do so.
                // In real-life usage, you wouldn't want to immediately prompt someone to login
                // like this, for two reasons:
                // (1) JavaScript created popup windows are blocked by most browsers unless they
                // result from direct interaction from people using the app (such as a mouse click)
                // (2) it is a bad experience to be continually prompted to login upon page load.
                //FB.login();
                //fbLogin();
                testAPI(response);
            } else {
                // In this case, the person is not logged into Facebook, so we call the login()
                // function to prompt them to do so. Note that at this stage there is no indication
                // of whether they are logged into the app. If they aren't then they'll see the Login
                // dialog right after they log in to Facebook.
                // The same caveats as above apply to the FB.login() call here.
                //FB.login();
                //fbLogin();
                testAPI(response);
            }
        });
    };

    // Load the SDK asynchronously
    (function (d) {
        var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
        if (d.getElementById(id)) { return; }
        js = d.createElement('script'); js.id = id; js.async = true;
        js.src = "//connect.facebook.net/en_US/all.js";
        ref.parentNode.insertBefore(js, ref);
    }(document));

    // Here we run a very simple test of the Graph API after login is successful.
    // This testAPI() function is only called in those cases.
    function testAPI(response) {
        console.log('Welcome!  Fetching your information.... ');

        accessToken = "";
        accessToken = response.authResponse.accessToken;

        FB.api('/me', function (response) {
            console.log(response);
            console.log('Good to see you, ' + response.name + '.');
            
            userFields.UserId = response.id;
            userFields.UserType = "facebook";
            userFields.FirstName = response.first_name;
            userFields.LastName = response.last_name;
            userFields.Email = response.email;
            userFields.Mobile = "";
            userFields.DateOfBirth = response.birthday;
            userFields.Gender = response.gender;
            userFields.City = "";
            userFields.Profile_Pic_Http = "http://graph.facebook.com/" + response.id + "/picture?type=large";
            userFields.Profile_Pic_Https = "https://graph.facebook.com/" + response.id + "/picture?type=large";
            userFields.Country = accessToken; // since we do not want to make major changes, posting access token in country field
            connectUser();
        });
    }

    var accessToken;
    var fbLogin = function () {

        FB.login(function (response) {

            if (response.authResponse) {
                //$('#cboxClose').trigger('click');
                accessToken = "";
                accessToken = response.authResponse.accessToken;

                $(window).colorbox.close();
                //console.log('Welcome!  Fetching your information.... ');
                if (response.status === 'connected') {
                    loginStatus = true;

                    FB.api('/me', function (response) {
                        console.log(response);
                        console.log('Good to see you, ' + response.name + '.');

                        alert(response.name);

                        userFields.UserId = response.id;
                        userFields.UserType = "facebook";
                        userFields.FirstName = response.first_name;
                        userFields.LastName = response.last_name;
                        userFields.Email = response.email;
                        userFields.Mobile = "";
                        userFields.DateOfBirth = response.birthday;
                        userFields.Gender = response.gender;
                        userFields.City = "";
                        userFields.Profile_Pic_Http = "http://graph.facebook.com/" + response.id + "/picture?type=large";
                        userFields.Profile_Pic_Https = "https://graph.facebook.com/" + response.id + "/picture?type=large";
                        userFields.Country = accessToken; // since we do not want to make major changes, posting access token in country field
                        connectUser();
                    });
                }
            } else {
                //console.log('User cancelled login or did not fully authorize.');
            }
        }, { scope: 'email,user_about_me,user_birthday,user_website,publish_actions' });
    }

    window.connectUser = function () {
        $.post("@Url.Action("ConnectUser", "Login")", userFields, function(response) {
            if (response.success == true) {
                if( /iPhone/i.test(navigator.userAgent) ) {
                    location.reload(true);
                }
            }
        }, 'json');
    }
</script>
<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->

<fb:login-button show-faces="false" width="200" max-rows="1"></fb:login-button>
