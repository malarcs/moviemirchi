using DataStoreLib.Models;
using DataStoreLib.Storage;
using DataStoreLib.Utils;
using Microsoft.WindowsAzure;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;


namespace MvcWebRole2.Controllers
{
    public class AccountController : Controller
    {
        #region Set Connection String
        private void SetConnectionString()
        {
            var connectionString = CloudConfigurationManager.GetSetting("StorageTableConnectionString");
            Trace.TraceInformation("Connection str read");
            ConnectionSettingsSingleton.Instance.StorageConnectionString = connectionString;
        }
        #endregion

        #region Login
        // GET: /Login/
        [HttpGet]
        public ActionResult Login()
        {
            if (Session["userid"] != null)
            {
                return RedirectToAction("Index", "Home");
            }

            return View();
        }

        [HttpPost]
        public ActionResult Login(string userName, string password)
        {
            if (string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password))
            {
                TempData["Error"] = "Please enter username and password";
                return View();
            }

            try
            {
                SetConnectionString();

                TableManager tblMgr = new TableManager();
                UserEntity entity = tblMgr.GetUserByName(userName);
                if (entity != null)
                {
                    if (entity.UserName == userName && entity.Password == password)
                    {
                        Session["user"] = entity.UserName;
                        Session["userid"] = entity.UserId;
                        Session["username"] = entity.FirstName + " " + entity.LastName;
                        Session["type"] = entity.UserType;

                        return RedirectToAction("AddMovie", "Movie");
                    }
                    else
                    {
                        TempData["Error"] = "Login Failed. Inalid username or password.";
                    }
                }
                else
                {
                    TempData["Error"] = "Login Failed. Inalid username or password.";
                }
            }
            catch (Exception)
            {
                TempData["Error"] = "Login Failed. Inalid username or password.";
            }

            return View();
        }
        #endregion

        #region Sign up
        [HttpGet]
        public ActionResult Register()
        {
            if (Session["userid"] != null)
            {
                return RedirectToAction("Index", "Home");
            }

            return View();
        }

        [HttpPost]
        public ActionResult Register(string userJson)
        {
            if (string.IsNullOrEmpty(userJson))
            {
                return Json(new { Status = "Error" }, JsonRequestBehavior.AllowGet);
            }

            try
            {
                JavaScriptSerializer json = new JavaScriptSerializer();

                UserEntity affil = json.Deserialize(userJson, typeof(UserEntity)) as UserEntity;
                if (affil != null)
                {
                    SetConnectionString();

                    UserEntity entity = new UserEntity();

                    entity.RowKey = entity.ReviewId = Guid.NewGuid().ToString();
                    entity.UserName = affil.UserName;
                    entity.Password = affil.Password;
                    entity.FirstName = affil.FirstName;
                    entity.Review = affil.Review;
                    entity.OutLink = affil.OutLink;
                    entity.Summary = affil.Summary;

                    TableManager tblMgr = new TableManager();
                    tblMgr.UpdateReviewById(entity);
                }
                else
                {
                    return Json(new { Status = "Error" }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception)
            {
                return Json(new { Status = "Error" }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { Status = "Ok" }, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Logout
        public ActionResult Logout()
        {
            Session["user"] = null;
            Session["userid"] = null;
            Session["username"] = null;
            Session["type"] = null;
            Session.Abandon();
            Session.Clear();

            return RedirectToAction("Login", "Account");
        }
        #endregion
    }
}
